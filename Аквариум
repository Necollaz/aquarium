internal class Program
{
    private static void Main(string[] args)
    {
        Aquarium aquarium = new Aquarium(3);
        aquarium.Work();
    }
}

public class Fish
{
    private int MaxAge = 10;

    public Fish(string name, int age)
    {
        Name = name;
        Age = age;
    }

    public string Name { get; private set; }
    public int Age { get; private set; }

    public void IncreaseAge()
    {
        if(Age < MaxAge)
            Age++;
    }

    public void ShowInfo()
    {
        Console.WriteLine($"Рыба - {Name}, возраст - {Age}.");
    }

    public bool IsDead()
    {
        return Age >= MaxAge;
    }
}

public class Aquarium
{
    private List<Fish> _fishes = new List<Fish>();
    private int _maxFishCapacity;

    public Aquarium(int maxFish)
    {
        _maxFishCapacity = maxFish;
    }

    public void Work()
    {
        const string CommandAddFish = "1";
        const string CommandRemoveFish = "2";
        const string CommandExit = "3";

        bool isWork = true;

        while (isWork)
        {
            Console.WriteLine("Ваш аквариум.");
            ShowAllFishes();
            Console.WriteLine($"Максимальное количество рыб в аквариуме: {_maxFishCapacity} шт.");
            Console.WriteLine($"{CommandAddFish} - добавить рыбу.");
            Console.WriteLine($"{CommandRemoveFish} - убрать рыбу.");
            Console.WriteLine($"{CommandExit} - выйти.");
            string userInput = Console.ReadLine();

            switch (userInput)
            {
                case CommandAddFish:
                    AddFish();
                    break;

                case CommandRemoveFish:
                    RemoveRandomFish();
                    break;

                case CommandExit:
                    isWork = false;
                    break;

                default:
                    Console.WriteLine("Такой команды нет.");
                    break;
            }

            if (isWork)
            {
                GrowOldFishes();
                RemoveDeadFishes();
            }

            Console.Clear();
        }

        Console.ReadKey();
        Console.WriteLine("Нажмите любую клавишу для выхода.");
    }

    private void AddFish()
    {
        if(_fishes.Count < _maxFishCapacity)
        {
            Console.WriteLine("Введите имя рыбы: ");
            string name = Console.ReadLine();
            Console.WriteLine("Введите возраст рыбы: ");
            int age;

            if(int.TryParse(Console.ReadLine(), out age))
            {
                Fish newFish = new Fish(name, age);
                _fishes.Add(newFish);
                Console.WriteLine("Рыба добавлена в аквариум.");
            }
            else
            {
                Console.WriteLine("Не верный ввод возраста. Рыба не добавлена в аквариум.");
                Console.ReadKey();
            }
        }
        else
        {
            Console.WriteLine($"Аквариум переполнен. Максимальное число рыб - {_maxFishCapacity} шт.");
            Console.ReadKey();
        }
    }

    private void GrowOldFishes()
    {
        foreach (var fish in _fishes)
        {
            fish.IncreaseAge();
        }
    }

    private void RemoveRandomFish()
    {
        Random random = new Random();

        if(_fishes.Count > 0)
        {
            int randomIndex = random.Next(0, _fishes.Count);
            _fishes.RemoveAt(randomIndex);
        }
        else
        {
            Console.WriteLine("Рыб в аквариуме нет.");
        }
    }

    private void RemoveDeadFishes()
    {
        for (int i = _fishes.Count - 1; i >= 0; i--)
        {
            if (_fishes[i].IsDead())
            {
                _fishes.RemoveAt(i);
            }
        }
    }

    private void ShowAllFishes()
    {
        if(_fishes.Count > 0)
        {
            foreach (var fish in _fishes)
            {
                fish.ShowInfo();
            }
        }
        else
        {
            Console.WriteLine("В аквариуме нет рыб.");
        }
    }
}
